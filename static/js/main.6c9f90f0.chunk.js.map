{"version":3,"sources":["logo.svg","components/clearance/ClearanceProgress.js","components/clearance/ClearanceTable.js","components/clearance/ClearanceModal.js","components/clearance/ClearanceCard.js","components/clearance/Clearance.js","components/Menu/Content.js","components/Menu/AppMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ClearanceProgress","props","Progress","value","completedClearances","total","totalClearances","progress","color","size","ClearanceTable","Table","celled","padded","Header","Row","HeaderCell","singleLine","Body","clearanceList","map","clearance","index","key","Object","keys","Cell","ClearanceModal","React","useState","open","setOpen","Modal","onClose","onOpen","trigger","Button","fluid","circular","clearanceType","Content","Actions","content","onClick","getCompletedClearances","clearances","count","forEach","length","ClearanceCard","Card","centered","Image","floated","src","toUpperCase","Description","extra","Clearance","listCards","state","data","Group","itemsPerRow","Statistic","label","this","pendingClearances","Component","display","tabName","toLowerCase","AppMenu","activeItem","handleItemClick","e","name","setState","Grid","Column","width","Menu","vertical","tabular","Item","active","stretched","Segment","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c9f90f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Progress } from 'semantic-ui-react'\r\n\r\nfunction ClearanceProgress(props) {\r\n    return (\r\n        <Progress value={props.completedClearances} total={props.totalClearances} progress='ratio' color='green' size=\"medium\" />\r\n    )\r\n}\r\n\r\nexport default ClearanceProgress\r\n","import React from 'react'\r\nimport { Header, Table, Rating } from 'semantic-ui-react'\r\n\r\nconst renderTableRows = (clearanceList) => {\r\n    return (\r\n        <Table.Body>\r\n            {\r\n                clearanceList.map(\r\n                    (clearance) => {\r\n                        return (<Table.Row>\r\n                            {\r\n                                Object.keys(clearance).forEach(\r\n                                    (sampleKey) => {\r\n                                        console.log(sampleKey)\r\n                                        return <Table.Cell>{sampleKey}</Table.Cell>\r\n                                    }\r\n                                )\r\n                            }\r\n                        </Table.Row>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </Table.Body>\r\n    )\r\n}\r\n\r\nfunction ClearanceTable(props) {\r\n    return (\r\n        <Table celled padded>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell singleLine>Clearance</Table.HeaderCell>\r\n                    <Table.HeaderCell>Resolver</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {\r\n                    props.clearanceList.map( (clearance, index) => (\r\n                        <Table.Row key={index}>\r\n                            {\r\n                                Object.keys(clearance).map((key, index) => (\r\n                                    <Table.Cell>{clearance[key]}</Table.Cell>\r\n                                ))\r\n                            }\r\n                        </Table.Row>\r\n                    ) )\r\n                }\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default ClearanceTable\r\n","import React from 'react'\r\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\r\nimport ClearanceTable from './ClearanceTable'\r\n\r\nfunction ClearanceModal(props) {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    return (\r\n        <Modal onClose={() => setOpen(false)} onOpen={() => setOpen(true)} open={open}\r\n            trigger={<Button fluid circular > Details </Button>}>\r\n\r\n            <Modal.Header>\r\n                <Header fluid>{props.clearanceType} Clearances </Header>\r\n            </Modal.Header>\r\n\r\n            <Modal.Content>\r\n                <ClearanceTable clearanceList={props.clearanceList}></ClearanceTable>\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <Button content='Ok' color='green' onClick={() => setOpen(false)}/>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ClearanceModal\r\n\r\n","import React from 'react'\r\nimport ClearanceProgress from './ClearanceProgress'\r\nimport ClearanceModal from './ClearanceModal'\r\nimport { Button, Card, Image } from 'semantic-ui-react'\r\n\r\nconst getCompletedClearances = (clearances) => {\r\n    let count = 0\r\n    clearances.forEach((clearance) => {\r\n        if (clearance['resolveStatus'] === 'Pending') {\r\n            count = count + 1\r\n        }\r\n    })\r\n    return (clearances.length - count)\r\n}\r\n\r\nconst getTotalClearances = (clearances) => {\r\n    return (clearances.length)\r\n}\r\n\r\nconst getImg = (clearanceType) => {\r\n    if(clearanceType === 'hr') {\r\n        return 'https://static.thenounproject.com/png/199571-200.png'\r\n    } else if(clearanceType === 'finance') {\r\n        return 'https://cdn3.iconfinder.com/data/icons/business-vol-14/100/Artboard_2-512.png'\r\n    } else if(clearanceType === 'department') {\r\n        return 'https://cdn.iconscout.com/icon/premium/png-256-thumb/department-6-580992.png'\r\n    } else {\r\n        return 'https://cdn0.iconfinder.com/data/icons/warehouse-cargo-shipping/64/621_cargo-shipping-customs-clearance-airport-512.png'\r\n    }\r\n}\r\n\r\nfunction ClearanceCard(props) {\r\n    return (\r\n        <Card centered>\r\n            <Card.Content>\r\n                <Image\r\n                    floated='right'\r\n                    size='mini'\r\n                    src={getImg(props.clearanceType)}\r\n                />\r\n                <Card.Header> {props.clearanceType.toUpperCase()} </Card.Header>\r\n                <Card.Description>\r\n                    Clearances that are given by {props.clearanceType} Team\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <ClearanceProgress completedClearances={getCompletedClearances(props.clearanceList)} totalClearances={getTotalClearances(props.clearanceList)} />\r\n                    <ClearanceModal clearanceType={props.clearanceType} clearanceList={props.clearanceList}></ClearanceModal>\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ClearanceCard\r\n","import React, { Component } from 'react'\r\nimport ClearanceCard from \"./ClearanceCard\"\r\nimport { Card, Statistic } from \"semantic-ui-react\"\r\n\r\nclass Clearance extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            data: {\r\n                \"employeeDetails\": {\r\n                    \"EmployeeLogin\": \"0123458\",\r\n                    \"Resignation_Date\": \"6/25/2020\",\r\n                    \"FirstName\": \"empFirstName\",\r\n                    \"Relieving_Date1\": \"8/24/2020\",\r\n                    \"Process\": \"Offboarding\",\r\n                    \"LastName\": \"empLastName\"\r\n                },\r\n                \"clearances\": {\r\n                    \"hr\": [\r\n                        {\r\n                            \"clearanceName\": \"HR Clearnce 1\",\r\n                            \"resolver\": \"HR Resolver (12345678)\",\r\n                            \"resolveStatus\": \"Pending\"\r\n                        }\r\n                    ],\r\n                    \"department\": [\r\n                        {\r\n                            \"clearanceName\": \"Department Clearance 1\",\r\n                            \"resolver\": \"Department Resolver (12345678)\",\r\n                            \"resolveStatus\": \"NA\"\r\n                        }\r\n                    ],\r\n                    \"finance\": [\r\n                        {\r\n                            \"clearanceName\": \"Finance Clearance 1\",\r\n                            \"resolver\": \"Finance Resolver (12345678)\",\r\n                            \"resolveStatus\": \"Pending\"\r\n                        }\r\n                    ]\r\n                },\r\n                \"totalClearances\": 18,\r\n                \"pendingClearances\": 4,\r\n                \"completedClearances\": 14\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    listCards = () => {\r\n        return Object.keys(this.state.data.clearances).map((clearanceType) =>\r\n            <ClearanceCard clearanceType={clearanceType} clearanceList={this.state.data.clearances[clearanceType]}></ClearanceCard>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card.Group itemsPerRow={1}>\r\n                    <Card centered>\r\n                        <Card.Content>\r\n                            <Card.Header>\r\n                                <h1>CLEARANCE OVERVIEW</h1>\r\n                            </Card.Header>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <Statistic label='Total Clearances' value={this.state.data.totalClearances} />\r\n                            <Statistic label='Pending' value={this.state.data.pendingClearances} color='red' />\r\n                            <Statistic label='Completed' value={this.state.data.completedClearances} color='green' />\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Card.Group>\r\n                <Card.Group itemsPerRow={2}>\r\n                    {this.listCards()}\r\n                </Card.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clearance\r\n\r\n","import React from 'react'\r\nimport Clearance from '../clearance/Clearance';\r\n\r\nfunction Content(props) {\r\n    let display;\r\n    switch (props.tabName.toLowerCase()) {\r\n        case 'clearance':\r\n            display = (<Clearance></Clearance>)\r\n            break;\r\n        default:\r\n            display = (<div>404 NOT FOUND</div>)\r\n            break;\r\n    }\r\n    return (\r\n        display\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from 'react'\r\nimport { Grid, Menu, Segment } from 'semantic-ui-react'\r\nimport Content from './Content'\r\n\r\nclass AppMenu extends Component {\r\n  state = { activeItem: 'Clearance' }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Menu fluid vertical tabular>\r\n            <Menu.Item\r\n              name='Clearance'\r\n              active={activeItem === 'Clearance'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n            <Menu.Item\r\n              name='pics'\r\n              active={activeItem === 'pics'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n            <Menu.Item\r\n              name='companies'\r\n              active={activeItem === 'companies'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n            <Menu.Item \r\n              name='links'\r\n              active={activeItem === 'links'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Menu>\r\n        </Grid.Column>\r\n        <Grid.Column stretched width={12}>\r\n          <Segment>\r\n            <Content tabName={this.state.activeItem}></Content>\r\n          </Segment>\r\n        </Grid.Column>\r\n\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppMenu","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Clearance from './components/clearance/Clearance';\nimport  AppMenu from './components/Menu/AppMenu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Clearance></Clearance> */}\n      <AppMenu></AppMenu>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}